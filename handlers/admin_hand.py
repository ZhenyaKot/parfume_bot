from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter

from sqlalchemy.ext.asyncio import AsyncSession

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.orm_query import orm_add_product, orm_update_product
from keyboards.reply import create_keyboard
from keyboards.inline import callback_buttons
from filters.chat_types import ChatTypeFilter, IsAdmin

from database.orm_query import (
    orm_get_products,
    orm_delete_product,
    orm_get_product
)

admin_router = Router()
admin_router.message.filter(ChatTypeFilter(['private']), IsAdmin())

ADMIN_KEYBOARD = create_keyboard('–¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä',
                                 '—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤',
                                 placeholder='–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                 sizes=(2,))

ADD_KEYBOARD = create_keyboard(
    '–Ω–∞–∑–∞–¥',
    '–æ—Ç–º–µ–Ω–∞',
    sizes=(1,)
)

CANCELLATION = create_keyboard(
    '–æ—Ç–º–µ–Ω–∞',
    sizes=(1,)
)


class AddProduct(StatesGroup):
    name = State()
    description = State()
    price = State()
    discount = State()
    quantity = State()
    image = State()

    texts = {
        'AddProduct:name': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ',
        'AddProduct:description': '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ',
        'AddProduct:price': '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ',
        'AddProduct:discount': '–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –∑–∞–Ω–æ–≤–æ',
        'AddProduct:quantity': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ',
    }


@admin_router.message(Command('admin'))
async def admin_cmd(message: types.Message):
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=ADMIN_KEYBOARD)


@admin_router.message(F.text == '—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤')
async def list_product(callback: types.CallbackQuery, session: AsyncSession):
    products = await orm_get_products(session)
    if not products:
        await callback.answer('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç üòî')
        return
    for product in products:
        await callback.answer_photo(
            product.image,
            caption=f'<strong>{product.name}</strong>\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\
                    \n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product.price, 2)}\
                    \n–°–∫–∏–¥–∫–∞: {product.discount if product.discount != 0 else "–°–∫–∏–¥–∫–∏ –Ω–µ—Ç"}\
                    \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.quantity}',
            reply_markup=callback_buttons(
                buttons={
                    '—É–¥–∞–ª–∏—Ç—å': f'delete_{product.id}',
                    '–∏–∑–º–µ–Ω–∏—Ç—å': f'change_{product.id}'
                }
            ),
            parse_mode='HTML'
        )

    await callback.answer('–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ üëÜ', parse_mode='HTML')


@admin_router.callback_query(F.data.startswith('delete_'))
async def delete_product(callback: types.CallbackQuery, session: AsyncSession):
    product_id = int(callback.data.split('_')[-1])
    await orm_delete_product(session, product_id)
    print(product_id)

    await callback.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')
    await callback.message.answer(f'–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')


# –†–∞–±–æ—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö


class UpdateProductStates(StatesGroup):
    update_name = State()
    update_description = State()
    update_price = State()
    update_discount = State()
    update_quantity = State()
    update_image = State()


@admin_router.callback_query(F.data.startswith('change_'))
async def update_product(callback: types.CallbackQuery, session: AsyncSession):
    change_id = int(callback.data.split('_')[-1])
    buttons = callback_buttons(buttons={
        '–Ω–∞–∑–≤–∞–Ω–∏–µ': f'update_name_{change_id}',
        '–æ–ø–∏—Å–∞–Ω–∏–µ': f'update_description_{change_id}',
        '—Ü–µ–Ω–∞': f'update_price_{change_id}',
        '—Å–∫–∏–¥–∫–∞': f'update_discount_{change_id}',
        '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': f'update_quantity_{change_id}',
        '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': f'update_image_{change_id}',
    },
        sizes=(2,)
    )

    await callback.message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ,—á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å ', reply_markup=buttons)


@admin_router.message(StateFilter('*'), F.text.casefold() == '–æ—Ç–º–µ–Ω–∞')
async def cancellation_update_product(message: types.Message, state: FSMContext):
    current_state = await state.get_state()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if current_state is None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        return

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=ADMIN_KEYBOARD)  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ


@admin_router.callback_query(F.data.startswith('update_'))
async def update_option(callback: types.CallbackQuery, state: FSMContext):
    action, product_id = callback.data.split('_')[1], int(callback.data.split('_')[-1])
    await state.update_data(product_id=product_id)

    prompts = {
        'update_name': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
        'update_description': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
        'update_price': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞',
        'update_discount': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É —Ç–æ–≤–∞—Ä–∞',
        'update_quantity': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞',
        'update_image': '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
    }
    await callback.message.answer(prompts[f'update_{action}'], reply_markup=CANCELLATION)
    await state.set_state(getattr(UpdateProductStates, f'update_{action}'))


@admin_router.message(StateFilter(UpdateProductStates))
async def update_product_handler(message: types.Message, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    product_id = data.get('product_id')

    current_state = await state.get_state()
    action = current_state.split('_')[1]

    new_value = message.text
    if action in ['price', 'discount']:
        new_value = float(new_value)
    elif action in ['quantity']:
        new_value = int(new_value)
    elif action in ['image']:
        new_value = message.photo[-1].file_id
    updated_product = await orm_update_product(session, product_id, **{action: new_value})
    print(f"Updating product {product_id} - action: {action}, new_value: {new_value}")

    if updated_product:
        await message.answer_photo(
            updated_product.image,
            caption=f'<strong>{updated_product.name}</strong>\n'
                    f'–û–ø–∏—Å–∞–Ω–∏–µ: {updated_product.description}\n'
                    f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(updated_product.price, 2)}\n'
                    f'–°–∫–∏–¥–∫–∞: {updated_product.discount if updated_product.discount != 0 else "–°–∫–∏–¥–∫–∏ –Ω–µ—Ç"}\n'
                    f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {updated_product.quantity}',
            reply_markup=callback_buttons(
                buttons={
                    '—É–¥–∞–ª–∏—Ç—å': f'delete_{updated_product.id}',
                    '–∏–∑–º–µ–Ω–∏—Ç—å': f'change_{updated_product.id}'
                }
            ),
            parse_mode='HTML'
        )
    else:
        await message.answer('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.')

    await message.answer(f"{action.capitalize()} —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=ADMIN_KEYBOARD)
    await state.clear()


# —Ä–∞–±–æ—Ç–∞ c FSM

@admin_router.message(StateFilter(None), F.text == '–¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def add_product(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.\n–î–ª–∏–Ω–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–º –∏ –Ω–µ –±–æ–ª—å—à–µ 50',
                         reply_markup=ADD_KEYBOARD,
                         )
    await state.set_state(AddProduct.name)


@admin_router.message(StateFilter('*'), F.text.casefold() == '–æ—Ç–º–µ–Ω–∞')
async def cancellation_add_product(message: types.Message, state: FSMContext):
    current_state = state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer('–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞', reply_markup=ADMIN_KEYBOARD)


@admin_router.message(StateFilter('*'), F.text.casefold() == '–Ω–∞–∑–∞–¥')
async def back_step_add_product(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == AddProduct.name:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"'
                             )
        return
    previous = None
    for step in AddProduct.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(
                f"–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n {AddProduct.texts[previous.state]}"
            )
            return
        previous = step


@admin_router.message(F.text, AddProduct.name)
async def add_name(message: types.Message, state: FSMContext):
    name = message.text
    if len(name) < 3 or len(name) > 50:
        await message.answer('–¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–≤—É—Ö –∏ –º–µ–Ω—å—à–µ 50\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞')
        return
    await state.update_data(name=name)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(AddProduct.description)


@admin_router.message(AddProduct.description, F.text)
async def add_description(message: types.Message, state: FSMContext):
    description = message.text
    await state.update_data(description=description)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö ‚ÇΩ')
    await state.set_state(AddProduct.price)


@admin_router.message(AddProduct.price, F.text)
async def add_price(message: types.Message, state: FSMContext):
    price = message.text
    try:
        price = float(price)
        if price <= 0:
            await message.answer('–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è\n–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–Ω–æ–≤–∞')
            return
        await state.update_data(price=price)
        await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (%)\n–ï—Å–ª–∏ —Å–∫–∏–¥–∫–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "0" ')
        await state.set_state(AddProduct.discount)
    except ValueError:
        await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã\n–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–Ω–æ–≤–∞')
        return


@admin_router.message(AddProduct.discount, F.text)
async def add_discount(message: types.Message, state: FSMContext):
    discount = message.text
    try:
        discount = float(discount)
        if discount < 0 or discount > 100:
            await message.answer('–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 0 –∏ –Ω–µ –±–æ–ª—å—à–µ 100\n–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É —Å–Ω–æ–≤–∞')
            return
        await state.update_data(discount=discount)
        await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤')
        await state.set_state(AddProduct.quantity)
    except ValueError:
        await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏\n–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É —Å–Ω–æ–≤–∞')
        return


@admin_router.message(AddProduct.quantity, F.text)
async def add_quantity(message: types.Message, state: FSMContext):
    quantity = message.text
    try:
        quantity = int(quantity)
        if quantity <= 0:
            await message.answer('–ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Å–Ω–æ–≤–∞')
            return
        await state.update_data(quantity=quantity)
        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
        await state.set_state(AddProduct.image)
    except ValueError:
        await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Å–Ω–æ–≤–∞')
        return


@admin_router.message(AddProduct.image, F.photo)
async def add_image(message: types.Message, state: FSMContext, session: AsyncSession):
    image = message.photo[-1].file_id
    await state.update_data(image=image)
    data = await state.get_data()
    await orm_add_product(session, data)
    await message.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=ADMIN_KEYBOARD)
    await state.clear()
